#
# Basic AcroForms input controls rendering
#

formFields = {}

setupForm = (div, content, viewport) ->

  bindInputItem = (input, item) ->
    if input.name in formFields
      value = formFields[input.name]
      if input.type is 'checkbox'
        input.checked = value
      else if !input.type or input.type is 'text'
        input.value = value

    input.onchange = ->
      if input.type is 'checkbox'
        formFields[input.name] = input.checked
      else if !input.type or input.type is 'text'
        formFields[input.name] = input.value
      return

    return

  createElementWithStyle = (tagName, item) ->
    element = document.createElement tagName
    rect =
      PDFJS.Util
      .normalizeRect(
        viewport.convertToViewportRectangle item.rect
      )
    element.style.left = "#{Math.floor rect[0]}px"
    element.style.top = "#{Math.floor rect[1]}px"
    element.style.width = "#{Math.ceil(rect[2] - rect[0])}px"
    element.style.height = "#{Math.ceil(rect[3] - rect[1])}px"
    element

  assignFontStyle = (element, item) ->
    fontStyles = ''
    if 'fontSize' in item
      fontStyles += "font-size: #{Math.round(item.fontSize * viewport.fontScale)}px;"
    switch item.textAlignment
      when 0
        fontStyles += 'text-align: left;'
      when 1
        fontStyles += 'text-align: center;'
      when 2
        fontStyles += 'text-align: right;'
    element.setAttribute 'style', "#{element.getAttribute 'style'}#{fontStyles}"
    return

  content.getAnnotations()
  .then (items) ->
    for item in items
      switch item.subtype
        when 'Widget'
          break if item.fieldType isnt 'Tx' and
            item.fieldType isnt 'Btn' and
            item.fieldType isnt 'Ch'
          inputDiv = createElementWithStyle 'div', item
          inputDiv.className = 'inputHint'
          div.appendChild inputDiv
          input = undefined
          if item.fieldType is 'Tx'
            input = createElementWithStyle 'input', item
          if item.fieldType is 'Btn'
            input = createElementWithStyle 'input', item
            if item.flags & 32768
              input.type = 'radio'
              # radio button is not supported
            else if item.flags & 65536
              input.type = 'button'
              # pushbutton is not supported
            else
              input.type = 'checkbox'
          if item.fieldType is 'Ch'
            input = createElementWithStyle 'select', item
          # select box is not supported
          input.className = 'inputControl'
          input.name = item.fullName
          input.title = item.alternativeText
          assignFontStyle input, item
          bindInputItem input, item
          div.appendChild input
    return
  return

renderPage = (div, pdf, pageNumber, callback) ->
  pdf.getPage pageNumber
  .then (page) ->
    scale = 1.5
    viewport = page.getViewport scale

    pageDisplayWidth = viewport.width
    pageDisplayHeight = viewport.height

    pageDivHolder = document.createElement 'div'

    pageDivHolder.className = 'pdfpage'
    pageDivHolder.style.width = "#{pageDisplayWidth}px"
    pageDivHolder.style.height = "#{pageDisplayHeight}px"

    div.appendChild pageDivHolder

    # Prepare canvas using PDF page dimensions
    canvas = document.createElement 'canvas'
    context = canvas.getContext '2d'
    canvas.width = pageDisplayWidth
    canvas.height = pageDisplayHeight
    pageDivHolder.appendChild canvas

    # Render PDF page into canvas context
    renderContext =
      canvasContext: context
      viewport: viewport
    page.render renderContext
    .promise.then callback

    # Prepare and populate form elements layer
    formDiv = document.createElement 'div'
    pageDivHolder.appendChild formDiv
    setupForm formDiv, page, viewport
    return
  return

# Fetch the PDF document from the URL using promices
PDFJS.getDocument pdfWithFormsPath
.then (pdf) ->
  # Rendering all pages starting from first
  viewer = document.getElementById 'viewer'
  pageNumber = 1

  pageRenderingComplete = ->
    if pageNumber > pdf.numPages
      return # All pages rendered
    # Continue rendering of the next page
    renderPage viewer, pdf, pageNumber++, pageRenderingComplete

  renderPage viewer, pdf, pageNumber++, pageRenderingComplete

# ---
# generated by js2coffee 2.0.0