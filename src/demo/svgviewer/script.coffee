# Specify the main script used to create a new PDF.JS web worker.
# In production, leave this undefined or change it to point to the
# combined `pdf.worker.js` file.
PDFJS.workerSrc = '/npb-pdfjs-example/scripts/pdf.worker.js'

#
# See README for overview
#

# Parse query string to extract some parameters (it can fail for some input)
query = document.location.href.replace /^[^?]*(\?([^#]*))?(#.*)?/, '$2'
queryParams =
  if query
  then JSON.parse '{' + (
    query.split '&'
    .map (a) ->
      a.split '='
      .map decodeURIComponent
      .map JSON.stringify
      .join ': '
    .join ','
  ) + '}'
  else {}

url = queryParams.file or '/PDF/test.pdf'
scale = +queryParams.scale or 1.5

#
# Fetch the PDF document from the URL using promises
#
PDFJS.getDocument(url).then (pdf) ->
  numPages = pdf.numPages
  # Using promise to fetch the page
  promise = Promise.resolve()
  MAX_NUM_PAGES = 50 # For testing only.

  for i in [1..Math.min MAX_NUM_PAGES, numPages]
    anchor = document.createElement 'a'
    anchor.setAttribute 'name', "page= #{i}"
    anchor.setAttribute 'title', "Page #{i}"
    document.body.appendChild anchor

    # Using promise to fetch and render the next page
    promise = promise.then (
      (pageNum, anchor) ->
        pdf.getPage pageNum
        .then (page) ->
          viewport = page.getViewport scale
          container = document.createElement 'div'
          container.id = "pageContainer #{pageNum}"
          container.className = 'pageContainer'
          container.style.width = "#{viewport.width}px"
          container.style.height = "#{viewport.height}px"
          anchor.appendChild container
          page.getOperatorList()
          .then (opList) ->
            svgGfx = new PDFJS.SVGGraphics page.commonObjs, page.objs
            svgGfx.getSVG opList, viewport
            .then (svg) ->
              container.appendChild svg
              return
    ).bind null, i, anchor
  return

# ---
# generated by js2coffee 2.0.0