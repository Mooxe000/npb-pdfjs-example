# Any copyright is dedicated to the Public Domain.
# http://creativecommons.org/publicdomain/zero/1.0/

# Dummy XML Parser
DOMNodeMock = (nodeName, nodeValue) ->
  @nodeName = nodeName
  @nodeValue = nodeValue
  Object.defineProperty this, 'parentNode',
    value: null
    writable: true
  return

DOMNodeMock.prototype =
  get_firstChild: ->
    @childNodes[0]
  get_nextSibling: ->
    index = @parentNode.childNodes.indexOf(this)
    @parentNode.childNodes[index + 1]
  get_textContent: ->
    return @nodeValue or '' unless @childNodes
    @childNodes.map (child) ->
      child.textContent
    .join ''
  hasChildNodes: ->
    @childNodes and @childNodes.length > 0

decodeXML = (text) ->
  return text if text.indexOf('&') < 0
  text.replace /&(#(x[0-9a-f]+|\d+)|\w+);/gi
  , (all, entityName, number) ->
    return String.fromCharCode (
      if number[0] is 'x'
      then parseInt (
        number.substring 1
      ), 16
      else +number
    ) if number
    switch entityName
      when 'amp'
        return '&'
      when 'lt'
        return '<'
      when 'gt'
        return '>'
      when 'quot'
        return '"'
      when 'apos'
        return '\''
    '&' + entityName + ';'

DOMParserMock = ->

DOMParserMock::parseFromString = (content) ->
  content = content.replace(
    /<\?[\s\S]*?\?>|<!--[\s\S]*?-->/g, ''
  ).trim()

  nodes = []

  content = content.replace />([\s\S]+?)</g
  , (all, text) ->
    i = nodes.length
    node = new DOMNodeMock '#text', decodeXML text
    nodes.push node
    # ignoring whitespaces
    return '><' if node.textContent.trim().length is 0
    '>' + i + ',<'

  content = content.replace /<!\[CDATA\[([\s\S]*?)\]\]>/g
  , (all, text) ->
    i = nodes.length
    node = new DOMNodeMock '#text', text
    nodes.push node
    i + ','

  lastLength = undefined

  loop
    lastLength = nodes.length
    content = content.replace(
      /<([\w\:]+)((?:[\s\w:=]|'[^']*'|"[^"]*")*)(?:\/>|>([\d,]*)<\/[^>]+>)/g
      , (all, name, attrs, content) ->
        i = nodes.length
        node = new DOMNodeMock(name)
        children = []
        if content
          content = content.split(',')
          content.pop()
          content.forEach (child) ->
            childNode = nodes[+child]
            childNode.parentNode = node
            children.push childNode
            return
        node.childNodes = children
        nodes.push node
        i + ','
    )
    break unless lastLength < nodes.length

  documentElement: nodes.pop()

exports.DOMParserMock = DOMParserMock

# ---
# generated by js2coffee 2.0.0
