### Any copyright is dedicated to the Public Domain.
# http://creativecommons.org/publicdomain/zero/1.0/
###

#
# Node tool to dump SVG output into a file.
#
fs = require 'fs'

# HACK few hacks to let PDF.js be loaded not as a module in global space.
global.window = global
global.navigator = userAgent: 'node'
global.PDFJS = {}

require './domstubs.js'

PDFJS.workerSrc = true
require '../../build/singlefile/build/pdf.combined.js'

# Loading file from file system into typed array
pdfPath = process.argv[2] or '../../web/compressed.tracemonkey-pldi-09.pdf'
data = new Uint8Array fs.readFileSync pdfPath

# Dumps svg outputs to a folder called svgdump
writeToFile = (svgdump, pageNum) ->
  name = getFileNameFromPath pdfPath
  fs.mkdir './svgdump/', (err) ->
    if !err or err.code == 'EEXIST'
      fs.writeFile "./svgdump/#{name}-#{pageNum}.svg"
      , svgdump, (err) ->
        if err
          console.log 'Error: ' + err
        else
          console.log 'Page: ' + pageNum
        return
    return
  return

# Get filename from the path
getFileNameFromPath = (path) ->
  index = path.lastIndexOf '/'
  extIndex = path.lastIndexOf '.'
  path.substring index, extIndex


# Will be using promises to load document, pages and misc data instead of
# callback.
PDFJS.getDocument data
.then (doc) ->
  numPages = doc.numPages
  console.log '# Document Loaded'
  console.log "Number of Pages: #{numPages}"
  console.log()

  lastPromise = Promise.resolve() # will be used to chain promises

  loadPage = (pageNum) ->
    doc.getPage pageNum
    .then (page) ->
      console.log "# Page #{pageNum}"
      viewport = page.getViewport 1.0
      console.log "Size: #{viewport.width}x#{viewport.height}"
      console.log()
      page.getOperatorList()
      .then (opList) ->
        svgGfx = new PDFJS.SVGGraphics page.commonObjs, page.objs
        svgGfx.embedFonts = true
        svgGfx.getSVG opList, viewport
        .then (svg) ->
          svgDump = svg.toString()
          writeToFile svgDump, pageNum
          return

  i = 1
  while i <= numPages
    lastPromise = lastPromise.then loadPage.bind null, i
    i++

  lastPromise

.then ->
  console.log '# End of Document'
  return
, (err) ->
  console.error "Error: #{err}"
  return

# ---
# generated by js2coffee 2.0.0